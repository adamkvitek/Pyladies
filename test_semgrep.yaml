rules:
  - id: is-comparison
    languages:
      - python
    message: The operator 'is' is for reference equality, not value equality! Use
      `==` instead!
    pattern: $SOMEVAR is "..."
    severity: ERROR

  - id: react-dangerouslysetinnerhtml
    languages:
      - js
    message: >
      Setting HTML from code is risky because itâ€™s easy to inadvertently expose
      your users to a cross-site scripting (XSS) attack.
    patterns:
      - pattern-either:
          - pattern: |
              <$X dangerouslySetInnerHTML=/>
          - pattern: |
              {dangerouslySetInnerHTML: ...}
    severity: WARNING

  - fix-regex:
      regex: (autoescape.*?)False
      replacement: \1True
    id: context-autoescape-off
    languages:
      - python
    message: |
      Detected a Context with autoescape diabled. If you are
      rendering any web pages, this exposes your application to cross-site
      scripting (XSS) vulnerabilities. Remove 'autoescape: False' or set it
      to 'True'.
    metadata:
      cwe: "CWE-79: Improper Neutralization of Input During Web Page Generation
        ('Cross-site Scripting')"
      owasp: "A7: Cross-site Scripting (XSS)"
      references:
        - https://docs.djangoproject.com/en/3.1/ref/settings/#templates
        - https://docs.djangoproject.com/en/3.1/topics/templates/#django.template.backends.django.DjangoTemplates
    patterns:
      - pattern-either:
          - pattern: '{..., "autoescape": False, ...}'
          - pattern: $D["autoescape"] = False
    severity: WARNING

  - id: deprecated-api
    languages:
      - python
    message: is_safe_url() is deprecated as of Django 4.0. Use
      url_has_allowed_host_and_scheme() instead.
    pattern: django.utils.http.is_safe_url(...)
    severity: WARNING

